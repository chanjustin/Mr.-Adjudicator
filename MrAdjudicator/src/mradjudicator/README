Welcome to Mr. Adjudicator.
Run the program by calling the GUI.java file.
A debate can be scored in the "Scoring" pane.
Data from past debate sessions can be viewed, edited and deleted
in the "Viewing" pane.
Some data about past debate sessions can be searched in the "Searching" pane.

Debate.java
The Debate class is technically speaking a container class which allows
for easy manipulation of data pertaining to a debate.  All fields have
accessor and mutator methods.  There is also a method that returns the
user-readable String representation of the class and a method to generate
a character-delimited representation of the class that can be written to
the disk and easily parsed on another occasion.

This is a hierarchal composite data structure.  The composite data structure
in question is the 2D array which the program stores the attributes
of a Debater.

The Debate class has a record-like structure which is
reflected in run-time memory and on a text file on disk.

DebateTableModel.java
This is a custom table model to view a summary of Debate objects.
It is an extension of the AbstractTableModel.  The class allows for
easy searching of Debate files by motion and winning school.

GUI.java
The GUI class contains a very large number Java Swing components and
code generated by Netbeans.  There are also a large number of action
listeners and lengthy methods that are used to cope with such a complex
user interface.  This class handles all the front-end operations for
searching, viewing, editing, adding and deleting data about debates.

LinkedList.java
This is a generic singly linked list class that can be used to hold any type
of Object.  Internally, the class stores Node objects which stores
its own data and a reference to the next node in the linked list.
It is implements the Iterable and Iterator interfaces,
this means that the contents of the class can be itereated using
a for-each loop.

This is a hierarchal composite data structure.  The composite data structure
in question are the Debate files which the program stores in this linked 
list, Debate objects have a record-like structure which are represented
during run-time memory and on the text file on disk.

This linked list is hierarchal as more than one Debate object can be
stored in it at any one time. 

Node.java
This is a generic Node class that can store any type of data.  It is used as
a helper class as the linked list manipulates data through Node objects.
This Node is used for a singly linked list and only holds a reference
to the next node.  

Persister.java
The persister class handles the reading, writing and appending of Debate
objects to disk. 